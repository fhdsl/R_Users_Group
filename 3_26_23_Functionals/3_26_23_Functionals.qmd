---
title: "Functionals"
format: html
editor: visual
---

## Functional style of programming

> When using a functional style, you strive to decompose components of the problem into isolated functions that operate independently. Each function taken by itself is simple and straightforward to understand; complexity is handled by composing functions in various ways. - Hadley Wickham

Today, we think about how the functional style of programming can be applied for scaling up analysis in lieu of a for-loop: *can the looping mechanism be its own function, and the task to be repeated be its own function also?*

#### Motivating example: loading in multiple files

This is how we do it via a for-loop.

```{r}
paths = c("students.csv", "students2.csv")
loaded_dfs = vector(mode = "list", length = length(paths))
for(i in seq_along(paths)) {
  df = read_csv(paths[i])
  loaded_dfs[[i]] = df
}
```

We are following the best practice of looping:

-   Pre-allocating data structures so that you don't "grow" it in a loop

-   Not modifying an entire data structure within the loop so it doesn't generate multiple copies.

To do this functionally, we think about:

-   What variable we need to loop through: `paths`

-   The repeated task as a function: `read_csv()`

-   The looping mechanism, and its output: `map()` outputs lists.

It's this easy:

```{r}
loaded_dfs = map(paths, read_csv)
```

## Functionals

A **functional** is a function, such as `map()`, that takes a data structure and function as inputs and applies the function on the data structure, element by element. It encourages the usage of modular functions in your code. You should use functionals for clarity and style, not necessary for performance (yet).

Below is a visualization of what `map()` is doing.

![](https://upload.wikimedia.org/wikipedia/commons/0/06/Mapping-steps-loillibe-new.gif)

Or,

![](https://d33wubrfki0l68.cloudfront.net/f0494d020aa517ae7b1011cea4c4a9f21702df8b/2577b/diagrams/functionals/map.png){width="250"}

### One argument

`map()` takes in a vector or list, and then applies the function on each element of it. The output is *always* a list.

```{r}
library(purrr)
x = 1:10
map(x, log)
```

Lists are useful is what you are using it on requires a flexible data structure. It was perfect for holding several dataframes at once in our first example, but it's annoying for this example. To be more specific about the output type, you can do this via the `map_*` function, where `*` specifies the output type: `map_lgl()`, `map_chr()`, and `map_dbl()` functions return vectors of logical values, strings, or numbers respectively.

```{r}
map_dbl(x, log)
```

But really, we already have a vectorized function to do this, and you should use it whenever you can.

```{r}
log(x)
```

Here are some examples of converting a loop into a functional:

#### 1. Loop through different parameters to analyze a dataframe differently. (character vector input, numeric vector output)

```{r}
library(palmerpenguins)
library(tidyverse)
head(penguins)

species_to_analyze = c("Adelie", "Chinstrap", "Gentoo")
outcome = rep(NA, length(species_to_analyze))
for(i in seq_along(species_to_analyze)) {
  penguins_subset = filter(penguins, species == species_to_analyze[i])
  outcome[i] = mean(penguins_subset$bill_length_mm, na.rm=TRUE)
}
outcome
```

Functionally:

```{r}
analysis = function(current_species) {
  penguins_subset = filter(penguins, species == current_species)
  return(mean(penguins_subset$bill_length_mm, na.rm=TRUE))
}

map_dbl(c("Adelie", "Chinstrap", "Gentoo"), analysis)

```

In base-R:

```{r}
sapply(c("Adelie", "Chinstrap", "Gentoo"), analysis)
```

#### 2. Loop through columns of a dataframe to calculate summary statistics (dataframe or list input, numeric vector output)

```{r}
penguins_numeric = penguins %>% select(bill_length_mm, bill_depth_mm, flipper_length_mm, body_mass_g)

result = rep(NA, ncol(penguins_numeric))
for(i in seq_along(penguins_numeric)) {
  result[i] = mean(penguins_numeric[[i]], na.rm = TRUE)
}
result
```

Functionally:

```{r}
map_dbl(penguins_numeric, function(x) mean(x, na.rm = TRUE))
```

Here, R is interpreting the dataframe `penguins_numeric` as a *list*, iterating through each column as an element of a list:

![](https://d33wubrfki0l68.cloudfront.net/12f6af8404d9723dff9cc665028a35f07759299d/d0d9a/diagrams/functionals/map-list.png){width="300"}

We also defined an *anonymous function* that runs the `mean()` function with `na.rm = TRUE`. These simple, one-line functions save additional typing. We could have written:

```{r}
mean_remove_NA = function(x) {
  return(mean(x, na.rm = TRUE))
}
map_dbl(penguins_numeric, mean_remove_NA)
```

In base-R:

```{r}
lapply(penguins_numeric, function(x) mean(x, na.rm = TRUE))
```

### Two arguments

![](https://d33wubrfki0l68.cloudfront.net/f5cddf51ec9c243a7c13732b0ce46b0868bf8a31/501a8/diagrams/functionals/map2.png){width="300"}

### N Arguments

## 

![](https://d33wubrfki0l68.cloudfront.net/e698354d802ce16f83546db63c45a19b8d51f45e/43de7/diagrams/functionals/pmap-3.png){width="300"}

## References

[Advanced R](https://adv-r.hadley.nz/functionals.html)

[Purrr vs. Apply discussion](https://stackoverflow.com/questions/45101045/why-use-purrrmap-instead-of-lapply)
